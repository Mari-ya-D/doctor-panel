


import { Telegraf, Scenes, session } from 'telegraf';
import { BotContext } from './botContext';
import subscriptionScene from './scenes/subscriptionScene';
import * as dotenv from 'dotenv';

import { Markup } from 'telegraf';
const { Pool } = require('pg');
const pool = new Pool({
  user: 'bot_user',
  host: 'localhost',
  database: 'medical_bot',
  password: '2957288am', // –í–ê–ñ–ù–û: —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ —Ç–∏–ø–∞ string
  port: 5432,
});
module.exports = pool;


// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function hasActiveSubscription(userId: number) {
  const { rows } = await pool.query(
    'SELECT ends_at FROM subscriptions WHERE user_id = $1 ORDER BY ends_at DESC LIMIT 1',
    [userId]
  );
  if (!rows.length) return false;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
  return new Date(rows[0].ends_at) > new Date();
}


async function saveConsultation(userId: number, message: string, username:string| null, type: string, created_at: string) {
  await pool.query(
    'INSERT INTO consultations (user_id, message, username, type, created_at) VALUES ($1, $2, $3, $4, $5)',
    [userId, message, username, type,created_at]
  );
}


dotenv.config();


const bot = new Telegraf<BotContext>(process.env.BOT_TOKEN as string);

// –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
bot.use(session());
// –¥–∞–ª—å—à–µ —Å—Ü–µ–Ω—ã:
const stage = new Scenes.Stage<BotContext>([subscriptionScene]);
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
bot.command('subscribe', ctx => ctx.scene.enter('subscription'));

// bot.start(async (ctx) => {
//   await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –±–æ—Ç!');
// });


console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log(`Bot token:`, process.env.BOT_TOKEN)

bot.start(async (ctx) => {
  await ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –±–æ—Ç!',
    Markup.keyboard([
      ['üìÑ –°—Ç–∞—Ç—å–∏', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'],
      ['‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞']
    ]).resize()
  );
});

bot.hears('üìù –°—Ç–∞—Ç—å–∏', async (ctx) => {
  await ctx.reply('–†–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß');
});

bot.hears('üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', async (ctx) => {
  await ctx.scene.enter('subscription');
  console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª', ctx.message.text)


});
bot.hears('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', async (ctx) => {

  const userId = ctx.from?.id;
  if (!userId) {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const paid = await hasActiveSubscription(userId);
  if (paid) {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –û–ø–ª–∞—Ç–∏—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å');
    return;
  }

  await ctx.reply('–í—ã –≤ –ø–µ—Ä–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç–µ—Å—å?', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–î–∞', callback_data: 'first_time_yes' }],
        [{ text: '–ù–µ—Ç', callback_data: 'first_time_no' }]
      ]
    }
  });
  // ctx.session.awaitingConsultation = true;
});
const doctors = [
  { id: 1, name: '–°—É—Ö–∞–Ω–æ–≤ –†–æ–º–∞–Ω –ë–æ—Ä–∏—Å–æ–≤–∏—á', description: '...', photo: 'https://uro-andro.ru/sites/default/files/2012-11/img_6897_0.jpg' },
  { id: 2, name: '–î–∞–≤—ã–¥–æ–≤ –î–µ–Ω–∏—Å –°–µ—Ä–≥–µ–µ–≤–∏—á', description: '...', photo: 'https://uro-andro.ru/sites/default/files/2012-11/img_6880_0.jpg' },
  { id: 3, name: '–î–∞–Ω–∏–ª–æ–≤ –°–µ—Ä–≥–µ–π –ü–∞–≤–ª–æ–≤–∏—á', description: '...', photo: 'https://uro-andro.ru/sites/default/files/2025-08/danilov2.jpg' }
];
bot.action('first_time_no', async (ctx) => {
  const userId = ctx.from.id;
  ctx.session.consultStep = 'chooseDoctor';

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∂–µ –±—ã–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø–æ–∫–∞ —Å–ø–∏—Å–æ–∫ –æ–±—â–∏–π):');
  for (let doctor of doctors) {
    await ctx.replyWithPhoto(doctor.photo, {
      caption: `${doctor.name}\n${doctor.description}`,
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–í—ã–±—Ä–∞—Ç—å', callback_data: `select_doctor_${doctor.id}` }
          ]
        ]
      }
    });
  }
  await ctx.answerCbQuery();
});
bot.action('first_time_yes', async (ctx) => {
  ctx.session.consultStep = 'chooseDoctor';
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:');
  for (const doctor of doctors) {
    await ctx.replyWithPhoto(doctor.photo, {
      caption: `${doctor.name}\n${doctor.description}`,
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–í—ã–±—Ä–∞—Ç—å', callback_data: `doctor_${doctor.id}` }
          ]
        ]
      }
    });
  }
  await ctx.answerCbQuery();
});

bot.action(/doctor_\d+/, async (ctx) => {
  ctx.session.selectedDoctor = ctx.match[0]; // 'doctor_1', ...
  ctx.session.awaitingConsultation = true;
  await ctx.reply('–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É:');
})

bot.on('text', async (ctx) => {
  if (ctx.session.awaitingConsultation) {
    await saveConsultation(
      ctx.from.id,
      ctx.message.text,
      ctx.from.username || '',
      'question',
      new Date().toISOString()
    );
    ctx.session.awaitingConsultation = false;
    ctx.session.selectedDoctor = undefined;
    ctx.session.consultStep = undefined;
    await ctx.reply('–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä–∞—á—É!');
  }
});


bot.command('subscribe', (ctx) => ctx.scene.enter('subscription'));

(async () => {
  await bot.telegram.deleteWebhook();
  await bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
})();